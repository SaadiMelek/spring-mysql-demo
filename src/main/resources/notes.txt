docker pull mysql:latest

docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 mysql:latest

docker ps

docker stop mysql-container

cd C:\workspace\spring-mysql-demo

docker build -t spring-mysql-demo:latest .

docker images

docker-compose up -d

download minikube : https://minikube.sigs.k8s.io/docs/start/?arch=%2Fwindows%2Fx86-64%2Fstable%2F.exe+download

minikube start

kubectl get po -A

minikube kubectl -- get po -A

# to see web dashboard :
minikube dashboard


see documentation : https://minikube.sigs.k8s.io/docs/handbook/kubectl/

# add helm to path

# create configuration directory
helm create spring-mysql-demo-dir

# minikube cluster
minikube start --driver=docker

# see all the config
helm template spring-mysql-demo-dir/

eval $(minikube docker-env) ??? SET ENV VARS then use this : & minikube docker-env | Invoke-Expression

docker build -t spring-mysql-demo:latest .

helm install mychart spring-mysql-demo-dir

kubectl get all		==>	RESULT = 2 pods & 2 services & deployment & replicaset

kubectl get services

#connect to mysql service
minikube service mychart-mysql-service --url

# to access to LoadBalancer service mychart-spring-app-service (access the app endpoints via browser or postman [http://localhost:8080//addExchangeRate , http://localhost:8080//getAmount ...]):
minikube tunnel

# to see app logs :
kubectl get pods
then 
kubectl logs -f mychart-spring-app-deployment-7f8947c947-w2rzd
mychart-spring-app-deployment-7f8947c947-w2rzd IS the PDO name




######################################################################################


10 commandes Docker et docker compose à connaître

↳ Enregistre ce post 👇

Si tu es un développeur, maîtriser Docker et docker compose est indispensable pour gagner en efficacité. Ces 10 commandes te permettront de gérer tes conteneurs et tes configurations comme un pro.

1- docker ps
↳ Liste les conteneurs actifs. Parfait pour vérifier rapidement ce qui tourne sur ton environnement.

2- docker exec -it <container_id> bash
↳ Accède à un conteneur en cours d'exécution. Idéal pour déboguer directement à l'intérieur du conteneur.

3- docker logs <container_id>
↳ Consulte les logs d'un conteneur. Essentiel pour diagnostiquer des problèmes en cours de route.

4- docker stop $(docker ps -q)
↳ Arrête tous les conteneurs en une seule commande. Pratique pour libérer des ressources rapidement.

5- docker rm $(docker ps -a -q)
↳ Supprime tous les conteneurs arrêtés. Indispensable pour garder ton environnement propre.

6- docker compose up -d
↳ Démarre tes services en arrière-plan. Parfait pour lancer ton application sans bloquer ton terminal.

7- docker compose down
↳ Arrête et supprime tous les conteneurs, réseaux, volumes définis dans ton docker-compose. Idéal pour repartir sur une base propre.

8- docker build -t <image_name> .
↳ Crée une nouvelle image Docker à partir d'un Dockerfile. Essentiel pour déployer tes applications.

9- docker compose logs -f
↳ Affiche les logs de tous les services en temps réel. Utile pour surveiller ton application après le lancement.

10- docker system prune
↳ Nettoie les images, conteneurs, volumes inutilisés. Indispensable pour libérer de l'espace disque.

Le succès réside dans la maîtrise des outils.
Exploite ces commandes pour optimiser ton workflow.

Quelles sont tes commandes Docker préférées?

___________ Tu as aimé ce post ? 👇

Hello, moi c’est Damien 🧊, je transforme vos idées en solutions web performantes.

Ce post t'a plu ? Un petit like 👍, un commentaire de soutien 💬, ou même un partage 🔁 serait vraiment top